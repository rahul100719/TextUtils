{"ast":null,"code":"import _slicedToArray from \"F:\\\\React Js\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\React Js\\\\my-app\\\\src\\\\components\\\\About.js\";\nimport React, { useState } from \"react\";\nfunction About(props) {\n  var _useState = useState({\n      color: 'black',\n      backgroundColor: 'white',\n      border: '2px solid black'\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    myStyle = _useState2[0],\n    setmyStyle = _useState2[1];\n  var _useState3 = useState(\"Enable Dark Mode\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    modeBtnText = _useState4[0],\n    setmodeBtnText = _useState4[1];\n  var chnageMode = function chnageMode() {\n    if (myStyle.color === 'white') {\n      setmyStyle({\n        color: 'black',\n        backgroundColor: 'white',\n        border: '2px solid black'\n      });\n      setmodeBtnText(\"Enable Dark Mode\");\n    } else {\n      setmyStyle({\n        color: 'white',\n        backgroundColor: 'black',\n        border: '2px solid white'\n      });\n      setmodeBtnText(\"Enable Light Mode\");\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container my-3\",\n    style: myStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"About Us\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion\",\n    id: \"accordionExample\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"accordion-header\",\n    id: \"headingOne\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"accordion-button\",\n    type: \"button\",\n    \"data-bs-toggle\": \"collapse\",\n    \"data-bs-target\": \"#collapseOne\",\n    \"aria-expanded\": \"true\",\n    \"aria-controls\": \"collapseOne\",\n    style: myStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  }, \"Accordion Item #1\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"collapseOne\",\n    className: \"accordion-collapse collapse show\",\n    \"aria-labelledby\": \"headingOne\",\n    \"data-bs-parent\": \"#accordionExample\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, \"This is the first item's accordion body.\"), \" It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, \".accordion-body\"), \", though the transition does limit overflow.\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"accordion-header\",\n    id: \"headingTwo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"accordion-button collapsed\",\n    type: \"button\",\n    \"data-bs-toggle\": \"collapse\",\n    \"data-bs-target\": \"#collapseTwo\",\n    \"aria-expanded\": \"false\",\n    \"aria-controls\": \"collapseTwo\",\n    style: myStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, \"Accordion Item #2\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"collapseTwo\",\n    className: \"accordion-collapse collapse\",\n    \"aria-labelledby\": \"headingTwo\",\n    \"data-bs-parent\": \"#accordionExample\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, \"This is the second item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, \".accordion-body\"), \", though the transition does limit overflow.\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"accordion-header\",\n    id: \"headingThree\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"accordion-button collapsed\",\n    type: \"button\",\n    \"data-bs-toggle\": \"collapse\",\n    \"data-bs-target\": \"#collapseThree\",\n    \"aria-expanded\": \"false\",\n    \"aria-controls\": \"collapseThree\",\n    style: myStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, \"Accordion Item #3\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"collapseThree\",\n    className: \"accordion-collapse collapse\",\n    \"aria-labelledby\": \"headingThree\",\n    \"data-bs-parent\": \"#accordionExample\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, \"This is the third item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, \".accordion-body\"), \", though the transition does limit overflow.\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-dark my-2\",\n    onClick: chnageMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, modeBtnText))));\n}\nexport default About;","map":{"version":3,"names":["React","useState","About","props","color","backgroundColor","border","myStyle","setmyStyle","modeBtnText","setmodeBtnText","chnageMode"],"sources":["F:/React Js/my-app/src/components/About.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction About(props) {\r\n    const [myStyle, setmyStyle] = useState({\r\n        color:'black',\r\n        backgroundColor:'white',\r\n        border:'2px solid black'\r\n    });\r\n\r\n    const [modeBtnText,setmodeBtnText]=useState(\"Enable Dark Mode\")\r\n\r\n    const chnageMode=()=>{\r\n        if(myStyle.color==='white')\r\n        {\r\n           setmyStyle({\r\n                color:'black',\r\n        backgroundColor:'white',\r\n        border:'2px solid black'\r\n                \r\n            }) \r\n\r\n            setmodeBtnText(\"Enable Dark Mode\")\r\n        }\r\n        else{\r\n            setmyStyle({\r\n                color:'white',\r\n        backgroundColor:'black',\r\n        border:'2px solid white'\r\n                \r\n            }) \r\n\r\n            setmodeBtnText(\"Enable Light Mode\")\r\n\r\n        }\r\n    }\r\n  return (\r\n    <>\r\n      <div className=\"container my-3\" style={myStyle}>\r\n        <h1>About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n              <button\r\n                className=\"accordion-button\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n                style={myStyle}\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\">\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classes that we use to style each element. These classes control\r\n                the overall appearance, as well as the showing and hiding via\r\n                CSS transitions. You can modify any of this with custom CSS or\r\n                overriding our default variables. It's also worth noting that\r\n                just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\"\r\n                style={myStyle}\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingTwo\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\">\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\"\r\n                style={myStyle}\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingThree\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\">\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"container my-2\">\r\n        <button type=\"button\" className=\"btn btn-dark my-2\" onClick={chnageMode}>{modeBtnText}</button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default About;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}